Maximum Over Drive System
Codename: MODS
Developers:
    - NecroBumpist

For documentation, check the proper file in \docs\.
Like \docs\CURRENT.lua for documentation on v2.2

Versions
* Legacy: v1.0.1    (stable)
* Current: v2.2.0-alpha     (fragile, needs bug testing)
* Experimental: v3-pre-alpha

Summary:
MODS is a toolkit to aid in the coding of Lua Assembly.
MODS includes a custom linker and assembler. Together they can easily be used to code in LASM.

Notes:
    - test.lua is the script I do all of my testing from my IDE, and really should be ignored.
    - example.lasm is going to change often as I test out new features

In development:
    - A NASM like Macro system
    - More assembler and preprocessor directives
    - More debugging tools, including:
        - Automatic chunk property tracking including:
            - the MaximumStackSize
            - Upvalues.
            (VargFlags and Arguments will have to be dealt with by you)
        - Basic link-time instruction operand checks, including things like:
            - Not JUMPing out of the boundaries of a proto
            - Not reading from above the top of the stack
            - Not reading from a constant that wasn't added to the const table (I doubt this will ever be useful)
            - Anything else I can find that the normal Lua 5.1 bytecode verifier checks
    - Disassembler function
    - Complete overhaul of the system (will become v3), because the code right now, is horrible.
        - There really was, no planning. I tried to do everything in as few stages as possible
          Tokenize, Parse, Compile. But in reality, Parsing alone should have atleast 3 stages, but I plan more for improved flexibility.
          Not to mention this is my first time ever using a tokenized based parsing system. (As you can see, LEGACY was a line by line interpreter) 



Change Log:
    Current:
    	v2.2.1:
			- Minor correction in the way Link() handles Null strings
			- \bin\ocLASM.tns is exactly like ocLua, except it uses LASM :D
			(thanks to LuaSrcDiet for making it as small as possible, and ExtendeD for ocLua!)
        v2.2.0-alpha
            - General work on Assembler
            - Finished NASM like Macros.
            - Added a ".const" directive finally (this will auto-create a identifier, ie "k0" for the first constant)
        v2.1.0-alpha
            - the assembler is done for the most part, macro implementation is left
            - several directives still need to be implemented
            - #include needs to be implemented
            - testing needs to be conducted, it has only been minorly tested since v2.0.3-pre-alpa
    Legacy:
        v1.0.1
            - Second Debug() parameter, if true, the output can be parsable by v1 ParseLASM


I claim no ownership to the "ANoFrillsIntroToLua51VMInstructions.pdf" file by Kein-Hong Man.